#include <WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h" 
#include "DHT.h"
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>

#define pin2 4  // Pin del sensor DHT22
#define bmpPin 5  // Pin del sensor BMP280
#define buzzerPin 6  // Pin del buzzer (ajustado para no solaparse con sensores)
#define TEMP_THRESHOLD 27.0  
#define HUM_THRESHOLD 60.0   

DHT dht2(pin2, DHT22); 
Adafruit_BMP280 bme;    

char ssid[] = SECRET_SSID;   
char pass[] = SECRET_PASS;   
int keyIndex = 0;            
WiFiClient  client;

unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;

int number1 = 0;
int number2 = 0;
int number3 = 0;
int number4 = random(0,100);
String myStatus = "";

void setup() {
  Serial.begin(115200);  
  while (!Serial) {
    ; 
  }
  WiFi.mode(WIFI_STA);   
  ThingSpeak.begin(client);  
  Serial.println("Test de sensores:");
  dht2.begin();
  Wire.begin(21, 22);  
  if (!bme.begin(0x76)) {  
    Serial.println(F("Error con BMP280"));
    while (1);  
  }
  Serial.println(F("BMP280 verificado"));
  pinMode(buzzerPin, OUTPUT);
  digitalWrite(buzzerPin, LOW);  
}

void loop() {
   leerdht2();
  leerBMP280();
  delay(1000);
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass); 
      Serial.print(".");
      delay(5000);     
    } 
    Serial.println("\nConnected.");
  }
  ThingSpeak.setField(1, number1);
  ThingSpeak.setField(2, number2);
  ThingSpeak.setField(3, number3);

  if(number1 > number2){
    myStatus = String("field1 is greater than field2"); 
  }
  else if(number1 < number2){
    myStatus = String("field1 is less than field2");
  }
  else{
    myStatus = String("field1 equals field2");
  }
  
  ThingSpeak.setStatus(myStatus);
  
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
  delay(2000); 
}

void leerdht2() {
  float t2 = dht2.readTemperature();
  float h2 = dht2.readHumidity();

  while (isnan(t2) || isnan(h2)) {
    Serial.println("Verificando...");
    delay(2000);
    t2 = dht2.readTemperature();
    h2 = dht2.readHumidity();
  }
  number1 = t2;
  number2 = h2;
  Serial.print("Temperatura DHT22: ");
  Serial.print(t2);
  Serial.println(" ºC.");

  Serial.print("Humedad DHT22: ");
  Serial.print(h2);
  Serial.println(" %.");
  Serial.println("-----------------------");

  if (t2 > TEMP_THRESHOLD || h2 > HUM_THRESHOLD) {
    activarAlarma(); 
  } else {
    detenerAlarma();  
  }
}

void leerBMP280() {
  Serial.print(F("Temperatura BMP280: "));
  Serial.print(bme.readTemperature());
  Serial.println(F(" °C"));

  Serial.print(F("Presión BMP280: "));
  Serial.print(bme.readPressure() / 100.0F); 
  number3 = bme.readPressure() / 100.0F;
  Serial.println(F(" hPa"));

  Serial.print(F("Altitud BMP280: "));
  Serial.print(bme.readAltitude(1013.25));  
  Serial.println(F(" metros"));

  Serial.println("-----------------------");
}

void activarAlarma() {
  Serial.println("Fuera de rango");
  digitalWrite(buzzerPin, HIGH);  
}

void detenerAlarma() {
  digitalWrite(buzzerPin, LOW);  
}
